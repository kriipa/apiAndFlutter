// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/profile.dart';
import 'model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3220131603500328327),
      name: 'User',
      lastPropertyId: const IdUid(13, 666551719819036647),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(3, 4500841850339061647),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7806209815940174691),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8463463252905201194),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5029089379758548961),
            name: 'lname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4642881219840829021),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8039446133536964646),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 442989039513820823),
            name: 'passwordConfirmation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1274056288318731748),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 7514247059924492745)),
        ModelProperty(
            id: const IdUid(13, 666551719819036647),
            name: 'umId',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2803683658172505939),
      name: 'Profile',
      lastPropertyId: const IdUid(8, 8924061010379150814),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3824660030460685200),
            name: 'profileId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1296691777743245319),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 1933029809593424139)),
        ModelProperty(
            id: const IdUid(3, 48273525833096137),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4268294024281315765),
            name: 'lname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9214213018929035333),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4163170875648242687),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 310859619158951498),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8924061010379150814),
            name: 'address',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2803683658172505939),
      lastIndexId: const IdUid(5, 7514247059924492745),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        1922822936122369401,
        9205721361088111936,
        6381973814660702771
      ],
      retiredPropertyUids: const [
        2122814731325089335,
        8036276385069561813,
        4549583795448134345,
        2965627500970708195
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.umId,
        setId: (User object, int id) {
          object.umId = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final lnameOffset =
              object.lname == null ? null : fbb.writeString(object.lname!);
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final passwordConfirmationOffset = object.passwordConfirmation == null
              ? null
              : fbb.writeString(object.passwordConfirmation!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(14);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(6, fnameOffset);
          fbb.addOffset(7, lnameOffset);
          fbb.addOffset(8, genderOffset);
          fbb.addOffset(9, imageOffset);
          fbb.addOffset(10, passwordConfirmationOffset);
          fbb.addOffset(11, userIdOffset);
          fbb.addInt64(12, object.umId);
          fbb.finish(fbb.endTable());
          return object.umId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26),
              fname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              lname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              gender: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              passwordConfirmation:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              umId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));

          return object;
        }),
    Profile: EntityDefinition<Profile>(
        model: _entities[1],
        toOneRelations: (Profile object) => [],
        toManyRelations: (Profile object) => {},
        getId: (Profile object) => object.profileId,
        setId: (Profile object, int id) {
          object.profileId = id;
        },
        objectToFB: (Profile object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final lnameOffset =
              object.lname == null ? null : fbb.writeString(object.lname!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          fbb.startTable(9);
          fbb.addInt64(0, object.profileId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, fnameOffset);
          fbb.addOffset(3, lnameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, genderOffset);
          fbb.addOffset(6, phoneOffset);
          fbb.addOffset(7, addressOffset);
          fbb.finish(fbb.endTable());
          return object.profileId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Profile(
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              fname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              lname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              gender: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              profileId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[0]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.fname]
  static final fname = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.lname]
  static final lname = QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.gender]
  static final gender = QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.image]
  static final image = QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.passwordConfirmation]
  static final passwordConfirmation =
      QueryStringProperty<User>(_entities[0].properties[6]);

  /// see [User.userId]
  static final userId = QueryStringProperty<User>(_entities[0].properties[7]);

  /// see [User.umId]
  static final umId = QueryIntegerProperty<User>(_entities[0].properties[8]);
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// see [Profile.profileId]
  static final profileId =
      QueryIntegerProperty<Profile>(_entities[1].properties[0]);

  /// see [Profile.id]
  static final id = QueryStringProperty<Profile>(_entities[1].properties[1]);

  /// see [Profile.fname]
  static final fname = QueryStringProperty<Profile>(_entities[1].properties[2]);

  /// see [Profile.lname]
  static final lname = QueryStringProperty<Profile>(_entities[1].properties[3]);

  /// see [Profile.email]
  static final email = QueryStringProperty<Profile>(_entities[1].properties[4]);

  /// see [Profile.gender]
  static final gender =
      QueryStringProperty<Profile>(_entities[1].properties[5]);

  /// see [Profile.phone]
  static final phone = QueryStringProperty<Profile>(_entities[1].properties[6]);

  /// see [Profile.address]
  static final address =
      QueryStringProperty<Profile>(_entities[1].properties[7]);
}
